/**
************************************************************************************************
* @file			SDK_Macro.h
* @author		Solution Team
* @brief		SDK macro define header file
***********************************************************************************************
* @attention
*
* Copyright(c) 2015 ~ 2020 eWBM Korea, Ltd.
* All rights reserved.
* This software contains confidential information of eWBM Korea Co., Ltd.
* And unauthorized distribution of this software, or any portion of it are prohibited.
*
***********************************************************************************************
*/

#ifndef	_SDK_MACRO_H_
#define	_SDK_MACRO_H_

//----------------------------------------------------------------------------------------------
//	register IO
//----------------------------------------------------------------------------------------------
#define HWREG(ADDR)						ADDR
//----------------------------------------------------------------------------------------------
//	bit adjust
//----------------------------------------------------------------------------------------------
#define SETBITS(REG, DATA)				REG |= DATA
#define CLRBITS(REG, DATA)				REG &= ~(DATA)
#define XORBITS(REG, DATA)				REG ^= DATA

//----------------------------------------------------------------------------------------------
//	make WORD / DWORD
//----------------------------------------------------------------------------------------------
#define MAKE_U8_TO_U32(b3, b2, b1, b0)	(((U32)((U8)(b3) << 24)) | ((U8)(b2) << 16) | ((U8)(b1) << 8) | ((U8)(b0)))
#define MAKE_U16_TO_U32(h, l)			(((U32)(h) << 16) | ((l) & 0xFFFF))
#define MAKE_U8_TO_U16(h, l)			(((U16)(h) << 8) | ((l) & 0xFF))

//----------------------------------------------------------------------------------------------
//	get high/low WORD from DWORD(4 bytes)
//----------------------------------------------------------------------------------------------
#define MAKE_DWORD(b3, b2, b1, b0)	(((U32)((U8)(b3) << 24)) | ((U8)(b2) << 16) | ((U8)(b1) << 8) | ((U8)(b0)))
#define MAKE_WORD(h, l)				(((U32)(h) << 16) | ((l) & 0xFFFF))

#define GET_WORD_HIGH(x)			((U32)(x) >> 16)
#define GET_WORD_LOW(x)				((U32)(x) & 0xFFFF)

//----------------------------------------------------------------------------------------------
//	get high/low BYTE from WORD(2 bytes)
//----------------------------------------------------------------------------------------------
#define GET_BYTE_HIGH(x)			(((U32)(x) >> 8) & 0xFF)
#define GET_BYTE_LOW(x)				(((U32)(x) >> 0) & 0xFF)

//----------------------------------------------------------------------------------------------
//	get min/max value
//----------------------------------------------------------------------------------------------
#define MAX(a, b)					(((a) > (b)) ? (a) : (b))
#define MIN(a, b)					(((a) < (b)) ? (a) : (b))

//----------------------------------------------------------------------------------------------
//	get absolute value
//----------------------------------------------------------------------------------------------
#define ABS(x)						((x) > 0 ? (x) : (-(x)))

//----------------------------------------------------------------------------------------------
//	wwap macro(endian change)
//----------------------------------------------------------------------------------------------
#define SWAP16(x)					(((x) << 8) & 0xFF00) | (((x) >> 8) & 0xFF)
#define SWAP32(x)					(\
									(((U32)(x) >> 24) & 0x000000FF) |\
									(((U32)(x) >>  8) & 0x0000FF00) |\
									(((U32)(x) <<  8) & 0x00FF0000) |\
									(((U32)(x) << 24) & 0xFF000000))
#define SWAP(x, y)					{U32 temp = x; x = y; y = temp;}
//----------------------------------------------------------------------------------------------
#if (_SEMI_HOSTING)

#define	HOST_Printf					printf

#else

#define	HOST_Printf(...)

#endif
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#if (_UART_MONITOR)

#define	UART_Printf					UART_PutPrintf

#else

#define	UART_Printf(...)

#endif
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#if (_USB_MONITOR)

#define	USB_Printf					UART_PutPrintf

#else

#define	USB_Printf(...)

#endif
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
extern void Assert(S8 *exp, S8 *file, U32 line);

#if (_ASSERT_DEBUG)

//#define ASSERT(exp)				((exp) ? (void)0 : Assert(#exp, __FILE__, __LINE__ ))
#define ASSERT(exp)					Assert(#exp, __FILE__, __LINE__ )

#else

#define ASSERT(exp)					((void)0)

#endif

#endif

//----------------------------------------------------------------------------------------------
// end of file
//----------------------------------------------------------------------------------------------
